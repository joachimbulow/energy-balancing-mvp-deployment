apiVersion: apps/v1
kind: Deployment
metadata:
  name: flink-taskmanager
spec:
  replicas: 5
  selector:
    matchLabels:
      app: flink
      component: taskmanager
  template:
    metadata:
      labels:
        app: flink
        component: taskmanager
    spec:
      containers:
        - name: taskmanager
          image: pemmvpregistry.azurecr.io/coordinator:v10 # UPDATE IMAGE TAG HERE WHEN PUSHING NEW
          env:
            - name: KAFKA_BOOTSTRAP_SERVERS
              value: "mvp-cluster-kafka.energy-balancing-mvp.svc.cluster.local:9092"
            - name: INFLUX_URL
              value: "http://charts-v1-influxdb.energy-balancing-mvp.svc.cluster.local:8086"
            - name: REDIS_BROKER
              value: "charts-v1-redis-master.energy-balancing-mvp.svc.cluster.local"
            - name: REDIS_PORT
              value: "6379"
          args: ["taskmanager"]
          ports:
            - containerPort: 6122
              name: rpc
            - containerPort: 6125
              name: query-state
          livenessProbe:
            tcpSocket:
              port: 6122
            initialDelaySeconds: 60
            periodSeconds: 60
          volumeMounts:
            - name: flink-config-volume
              mountPath: /opt/flink/conf/
            #  Let us mount the job directly when building the image
            # - name: job-artifacts-volume
            #   mountPath: /opt/flink/usrlib
          securityContext:
            runAsUser: 9999 # refers to user _flink_ from official flink image, change if necessary
          resources:
            requests:
              cpu: "3"
              memory: "6Gi"
            limits:
              cpu: "3.5"
              memory: "10Gi"
      volumes:
        - name: flink-config-volume
          configMap:
            name: flink-config
            items:
              - key: flink-conf.yaml
                path: flink-conf.yaml
              - key: log4j-console.properties
                path: log4j-console.properties
        #  Let us mount the job directly when building the image
        # - name: job-artifacts-volume
        #   hostPath:
        #     path: /host/path/to/job/artifacts
